1. What is the difference between the following 2 statements?
setTimeout(booyah, 2000);
setTimeout(booyah(), 2000);

ANS : The first method gets called after specified time (i.e. 2 seconds) whereas the second one gets called immediately before initiating any parallel processing.

2. What do the following 2 alerts display (answer without running the code)?
var myfunc = function(a, x) {
 return a * x;
};
var x = myfunc(2, 3);
var y = myfunc;
alert(x);
alert(y(2,3));

ANS : Both alerts the same as variable y is just referencing the same function which is called at the last line is exactly as same as assigning value to x.

3. Write functions booyah1 and booyah2 so that in both cases below, an alert box comes up after 2 seconds that
says “BOOYAH!”
setTimeout(booyah1, 2000);
setTimeout(booyah2(), 2000);

ANS : 

function booyah1(){
 alert("BOOYAH!");
}
function booyah2(){
 setTimeout(function () {
 alert("BOOYAH!");
 }, 2000);
}

4. What is "Unobtrusive Javascript"? What is the practical application of Unobtrusive Javascript
(and the reasons for using it)?

➔ Its the method of writing JS where we apply seperation of concerns as each one having its own responsibility :  content(HTML), presentation(CSS) and behavior(JS).
Obstrusive would know the javascript whereas unobstrusive doesn't.

HTML
 <script src="file.js"></script>
<button id=”btn” >Click Me</button>

JS (file.js)
window.onload = function() {
document.getElementById(“btn”).onclick = function() {
alert(Clicked);
};
};

Reason:
1. We shouldn't leave any traces and composition of javascript & css in html page as much as possible, so that whenever we need changes in behavior then we can update JS instead of manipulating html.
